// Shared contains objects used across methods in multiple services.

syntax = "proto3";

package api.v1;

option go_package = "github.com/pubgolf/pubgolf/api/internal/lib/proto/api/v1;apiv1";

message Color {
  float r = 1;
  float g = 2;
  float b = 3;
  float a = 4;
}

enum ScoringCategory {
  SCORING_CATEGORY_UNSPECIFIED = 0;
  SCORING_CATEGORY_PUB_GOLF_NINE_HOLE = 1;
  SCORING_CATEGORY_PUB_GOLF_FIVE_HOLE = 2;
  SCORING_CATEGORY_PUB_GOLF_CHALLENGES = 3;
}

message Venue {
  // Global ID for the venue in ULID format (26 characters, base32), not to be confused with the venue key.
  string id = 1;
  string name = 2;
  // Address string suitable for display or using for a mapping query.
  string address = 3;
  string image_url = 4;
}

message EventRegistration {
  string event_key = 1;
  ScoringCategory scoring_category = 2;
}

message Player {
  string id = 1;
  PlayerData data = 2;

  // Order is not guaranteed. For now we return all registrations, but will likely have to provide visibility modifiers, pagination, archived events, etc in the future.
  repeated EventRegistration events = 3;
}

// PlayerData contains the user-editable fields for a player.
message PlayerData {
  string name = 1;
  ScoringCategory scoring_category = 2 [deprecated = true];
}

message ScoreBoard {
  enum ScoreStatus {
    SCORE_STATUS_UNSPECIFIED = 0;
    // SCORE_STATUS_PENDING indicates the player has not yet submitted/finalized their score for this round.
    SCORE_STATUS_PENDING = 1 [deprecated = true];
    // SCORE_STATUS_FINALIZED indicates that a player's score is "locked in" as of a given milestone.
    SCORE_STATUS_FINALIZED = 2;
    // SCORE_STATUS_INCOMPLETE indicates that a player's score is in an invalid or non-comparable state (e.g. they have dropped out of the event).
    SCORE_STATUS_INCOMPLETE = 3;
    // SCORE_STATUS_NON_SCORING indicates that a player's score will not be counted towards the overall leaderboard.
    SCORE_STATUS_NON_SCORING = 4;
    // SCORE_STATUS_PENDING_SUBMISSION indicates the player has not yet submitted their score for this round.
    SCORE_STATUS_PENDING_SUBMISSION = 5;
    // SCORE_STATUS_PENDING_VERIFICATION indicates the player has submitted a score for this round but it hasn't yet been approved by an organizer.
    SCORE_STATUS_PENDING_VERIFICATION = 6;
  }

  message ScoreBoardEntry {
    optional string entity_id = 1;
    string label = 2;

    int32 score = 3;
    // display_score_signed indicates that non-zero scores should be displayed with an explicit +/-.
    bool display_score_signed = 4;

    // rank is a display value indicating the ranking of the score. May be omitted in the case of ties, so ordering should be done based on the index of the `ScoreBoardEntry` in the repeated field `Scoreboard.scores`.
    optional uint32 rank = 5;

    // icon_key is an SF-Symbol name (e.g. "heart.fill").
    optional string icon_key = 6;
    optional Color icon_color = 7;
    ScoreStatus status = 8;
    optional string status_details = 9;
  }

  repeated ScoreBoardEntry scores = 1;
}

// --------------------
// Forms
// --------------------

// Rendering

message TextInput {
  optional string default_value = 1;
  optional int64 min_length = 2;
  optional int64 max_length = 3;
  optional string match_pattern = 4;
}

message NumericInput {
  optional int64 default_value = 1;
  optional int64 min_value = 2;
  optional int64 max_value = 3;
}

message SelectManyInputOption {
  string id = 1;
  string label = 2;
  optional bool default_value = 3;
}

enum SelectManyInputVariant {
  SELECT_MANY_INPUT_VARIANT_UNSPECIFIED = 0;
  SELECT_MANY_INPUT_VARIANT_CHECKBOX = 1;
}

message SelectManyInput {
  repeated SelectManyInputOption options = 1;
  SelectManyInputVariant variant = 2;
}

message SelectOneInputOption {
  string id = 1;
  string label = 2;
}

enum SelectOneInputVariant {
  SELECT_ONE_INPUT_VARIANT_UNSPECIFIED = 0;
  SELECT_ONE_INPUT_VARIANT_DROPDOWN = 1;
  SELECT_ONE_INPUT_VARIANT_RADIO_BUTTONS = 2;
}

message SelectOneInput {
  repeated SelectOneInputOption options = 1;
  optional string default_value_option_id = 2;
  SelectOneInputVariant variant = 3;
}

message FormInput {
  string id = 1;
  optional string label = 2;
  bool required = 3;

  oneof variant {
    TextInput text = 4;
    NumericInput numeric = 5;
    SelectManyInput select_many = 6;
    SelectOneInput select_one = 7;
  }
}

message FormGroup {
  optional string label = 1;
  repeated FormInput inputs = 2;
  optional string client_style_hook = 3;
}

message Form {
  repeated FormGroup groups = 1;
  optional string label = 2;
  optional string action_label = 3;
  optional string client_style_hook = 4;
}

// Submission

message SelectManyValue {
  repeated string selected_ids = 1;
}

message FormValue {
  string id = 1;
  oneof value {
    string text = 2;
    int64 numeric = 3;
    SelectManyValue select_many = 4;
    string select_one_selected_id = 5;
  }
}

message FormSubmission {
  repeated FormValue values = 1;
}

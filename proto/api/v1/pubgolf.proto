// PubGolf defines the app-facing API service for the in-game apps.

syntax = "proto3";

package api.v1;

import "api/v1/shared.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/pubgolf/pubgolf/api/internal/lib/proto/api/v1;apiv1";

// PubGolfService is the API server which handles all score keeping, scheduling and account management for pub golf.
service PubGolfService {
  // ClientVersion (unauthenticated) indicates to the server that a client of a given version is attempting to connect, and allows the server to respond with a "soft" or "hard" upgrade notification.
  rpc ClientVersion(ClientVersionRequest) returns (ClientVersionResponse) {}

  // Auth

  // CreatePlayer creates a new player profile for a given event.
  //
  // Deprecated: Use `StartPlayerLogin` RPC instead.
  rpc CreatePlayer(PubGolfServiceCreatePlayerRequest) returns (PubGolfServiceCreatePlayerResponse) {
    option deprecated = true;
  }

  // StartPlayerLogin (unauthenticated) registers the player's contact info if the player doesn't exist, then sends an auth code.
  rpc StartPlayerLogin(StartPlayerLoginRequest) returns (StartPlayerLoginResponse) {}

  // CompletePlayerLogin (unauthenticated) accepts an auth code and logs in the player, returning the data necessary to bootstrap a player's session in the app.
  rpc CompletePlayerLogin(CompletePlayerLoginRequest) returns (CompletePlayerLoginResponse) {}

  // Account

  // GetMyPlayer is an authenticated request that returns the same data as `CompletePlayerLogin()` if the player's auth token is still valid.
  rpc GetMyPlayer(GetMyPlayerRequest) returns (GetMyPlayerResponse) {}

  // DeleteMyAccount purges all data related to the authenticated player.
  rpc DeleteMyAccount(DeleteMyAccountRequest) returns (DeleteMyAccountResponse) {}

  // Player

  // GetPlayer returns the player object including profile data and event registrations, given a player_id.
  rpc GetPlayer(GetPlayerRequest) returns (GetPlayerResponse) {}

  // UpdateRegistration upserts an event registration for the given player.
  rpc UpdateRegistration(UpdateRegistrationRequest) returns (UpdateRegistrationResponse) {}

  // UpdatePlayerData updates the given player's profile data.
  rpc UpdatePlayerData(UpdatePlayerDataRequest) returns (UpdatePlayerDataResponse) {}

  // Event

  // GetSchedule returns the list of visible venues, as well as the next venue transition time. It optionally accepts a data version to allow local caching.
  rpc GetSchedule(GetScheduleRequest) returns (GetScheduleResponse) {}

  // GetVenue performs a bulk lookup of venue metadata by ID. IDs are scoped to an event key.
  rpc GetVenue(GetVenueRequest) returns (GetVenueResponse) {}

  // ListContentItems
  rpc ListContentItems(ListContentItemsRequest) returns (ListContentItemsResponse) {}

  // GetContentItem
  rpc GetContentItem(GetContentItemRequest) returns (GetContentItemResponse) {}

  // Scores

  // GetSubmitScoreForm returns the form definition for submitting or revising a player's score at a specific event venue.
  rpc GetSubmitScoreForm(GetSubmitScoreFormRequest) returns (GetSubmitScoreFormResponse) {}

  // GetSubmitScoreForm submits a player's proposed score at a specific event venue.
  rpc SubmitScore(SubmitScoreRequest) returns (SubmitScoreResponse) {}

  // Scoreboard

  // GetScoresForCategory
  rpc GetScoresForCategory(GetScoresForCategoryRequest) returns (GetScoresForCategoryResponse) {}

  // GetScoresForPlayer
  rpc GetScoresForPlayer(GetScoresForPlayerRequest) returns (GetScoresForPlayerResponse) {}

  // GetScoresForVenue
  rpc GetScoresForVenue(GetScoresForVenueRequest) returns (GetScoresForVenueResponse) {}
}

// ClientVersion

message ClientVersionRequest {
  uint32 client_version = 1;
}
message ClientVersionResponse {
  enum VersionStatus {
    VERSION_STATUS_UNSPECIFIED = 0;
    VERSION_STATUS_OK = 1;
    VERSION_STATUS_OUTDATED = 2;
    VERSION_STATUS_INCOMPATIBLE = 3;
  }
  VersionStatus version_status = 1;
}

// --------------------
// Auth
// --------------------

// CreatePlayer

message PubGolfServiceCreatePlayerRequest {
  option deprecated = true;

  string event_key = 1;
  PlayerData player_data = 2;
}
message PubGolfServiceCreatePlayerResponse {
  option deprecated = true;

  Player player = 1;
}

// StartPlayerLogin

message StartPlayerLoginRequest {
  // In E.164 format: https://www.twilio.com/docs/glossary/what-e164
  string phone_number = 1;
}
message StartPlayerLoginResponse {}

// CompletePlayerLogin

message CompletePlayerLoginRequest {
  // In E.164 format: https://www.twilio.com/docs/glossary/what-e164
  string phone_number = 1;
  string auth_code = 2;
}
message CompletePlayerLoginResponse {
  Player player = 1;
  string auth_token = 2;
}

// --------------------
// Account
// --------------------

message GetMyPlayerRequest {}
message GetMyPlayerResponse {
  Player player = 1;
}

message DeleteMyAccountRequest {}
message DeleteMyAccountResponse {}

// --------------------
// Player Info
// --------------------

message GetPlayerRequest {
  string player_id = 1;
}
message GetPlayerResponse {
  Player player = 1;
}

message UpdateRegistrationRequest {
  string player_id = 1;
  EventRegistration registration = 2;
}
message UpdateRegistrationResponse {
  EventRegistration registration = 1;
}

message UpdatePlayerDataRequest {
  string player_id = 1;
  PlayerData data = 2;
}
message UpdatePlayerDataResponse {
  PlayerData data = 1;
}

// --------------------
// Event Info
// --------------------

// GetSchedule

message GetScheduleRequest {
  string event_key = 1;
  optional uint32 cached_data_version = 2;
}
message GetScheduleResponse {
  message Schedule {
    // List of past venues. Does not include the current venue.
    repeated uint32 visited_venue_keys = 1;
    // Optional in the case that the event hasn't started yet.
    optional uint32 current_venue_key = 2;
    // Optional in the case that the next venue isn't yet visible to players, or after the second to last venue. The next venue key only becomes visible X mins before the next venue's start time.
    optional uint32 next_venue_key = 3;
    optional google.protobuf.Timestamp next_venue_start = 4;
    google.protobuf.Timestamp event_end = 5;
    // current_venue_description contains rules specific to the current venue, in markdown format.
    optional string current_venue_description = 6;
  }

  uint32 latest_data_version = 1;
  optional Schedule schedule = 2;
}

// GetVenue

message GetVenueRequest {
  string event_key = 1;
  repeated uint32 venue_keys = 2;
}
message GetVenueResponse {
  // VenueWrapper allows us to return an empty wrapper in the case of an invalid or unauthorized venue ID.
  message VenueWrapper {
    optional Venue venue = 1;
  }

  // Map of requested venue keys to Venue objects.
  map<uint32, VenueWrapper> venues = 1;
}

message ListContentItemsRequest {
  string event_key = 1;
}
message ListContentItemsResponse {
  message ContentItemMetaData {
    string id = 1;
    string display_name = 2;
    // icon_key is an SF-Symbol name (e.g. "heart.fill").
    string icon_key = 3;
    Color icon_color = 4;
  }

  message Section {
    string display_name = 1;
    repeated ContentItemMetaData content_sections = 2;
    // icon_key is an SF-Symbol name (e.g. "heart.fill").
    string icon_key = 3;
    Color icon_color = 4;
  }

  repeated Section sections = 1;
}

message GetContentItemRequest {
  string id = 1;
}
message GetContentItemResponse {
  // content is in markdown format.
  string content = 1;
}

// --------------------
// Scores
// --------------------

enum ScoreStatus {
  SCORE_STATUS_UNSPECIFIED = 0;
  SCORE_STATUS_REQUIRED = 1;
  SCORE_STATUS_OPTIONAL = 2;
  SCORE_STATUS_NOT_REQUIRED = 3;
  SCORE_STATUS_SUBMITTED_EDITABLE = 4;
  SCORE_STATUS_SUBMITTED_NON_EDITABLE = 5;
}

message GetSubmitScoreFormRequest {
  string event_key = 1;
  uint32 venue_key = 2;
  string player_id = 3;
}
message GetSubmitScoreFormResponse {
  ScoreStatus status = 1;
  Form form = 2;
}

message SubmitScoreRequest {
  string event_key = 1;
  uint32 venue_key = 2;
  string player_id = 3;
  optional string idempotency_key = 4;
  FormSubmission data = 5;
}
message SubmitScoreResponse {
  ScoreStatus status = 1;
}

// --------------------
// Scoreboard
// --------------------

message GetScoresForCategoryRequest {
  string event_key = 1;
  ScoringCategory category = 2;
}
message GetScoresForCategoryResponse {
  ScoreBoard score_board = 1;
}

message GetScoresForPlayerRequest {
  string event_key = 1;
  string player_id = 2;
}
message GetScoresForPlayerResponse {
  ScoreBoard score_board = 1;
}

message GetScoresForVenueRequest {
  string event_key = 1;
  string venue_id = 2;
}
message GetScoresForVenueResponse {
  ScoreBoard score_board = 1;
}

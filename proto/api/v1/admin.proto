// Admin defines the admin API service for the game management UI.

syntax = "proto3";

package api.v1;

import "api/v1/shared.proto";

option go_package = "github.com/pubgolf/pubgolf/api/internal/lib/proto/api/v1;apiv1";

// AdminService allows administering events with enhanced permissions.
service AdminService {
  // Debug

  // PurgeAllCaches clears all caches in the API server. Used for testing.
  rpc PurgeAllCaches(PurgeAllCachesRequest) returns (PurgeAllCachesResponse) {}

  // Players

  // CreatePlayer creates a new player profile for a given event.
  rpc CreatePlayer(AdminServiceCreatePlayerRequest) returns (AdminServiceCreatePlayerResponse) {}

  // UpdatePlayer modifies the player's profile and settings for a given event.
  rpc UpdatePlayer(UpdatePlayerRequest) returns (UpdatePlayerResponse) {}

  // ListPlayers returns all players for a given event.
  rpc ListPlayers(ListPlayersRequest) returns (ListPlayersResponse) {}

  // Schedule

  // ListVenues returns all venues that a stage can link to.
  rpc ListVenues(ListVenuesRequest) returns (ListVenuesResponse) {}

  // UpdateStage sets the details for a stage.
  rpc UpdateStage(UpdateStageRequest) returns (UpdateStageResponse) {}

  // ListEventStages returns a full schedule for an event.
  rpc ListEventStages(ListEventStagesRequest) returns (ListEventStagesResponse) {}

  // Adjustments

  // CreateAdjustmentTemplate creates an adjustment to surface in player score submission.
  rpc CreateAdjustmentTemplate(CreateAdjustmentTemplateRequest) returns (CreateAdjustmentTemplateResponse) {}

  // CreateAdjustmentTemplate updates an adjustment template.
  rpc UpdateAdjustmentTemplate(UpdateAdjustmentTemplateRequest) returns (UpdateAdjustmentTemplateResponse) {}

  // ListAdjustmentTemplates returns all adjustment templates for a given event.
  rpc ListAdjustmentTemplates(ListAdjustmentTemplatesRequest) returns (ListAdjustmentTemplatesResponse) {}

  // Scores

  // CreateStageScore sets the score and adjustments for a given pair of player and stage IDs.
  rpc CreateStageScore(CreateStageScoreRequest) returns (CreateStageScoreResponse) {}

  // CreateStageScore updates the score and adjustments for a player/stage pair, based on their IDs.
  rpc UpdateStageScore(UpdateStageScoreRequest) returns (UpdateStageScoreResponse) {}

  // ListStageScores returns all sets of (scores, adjustments[]) for an event, ordered chronologically by event stage, then chronologically by score creation time.
  rpc ListStageScores(ListStageScoresRequest) returns (ListStageScoresResponse) {}

  // DeleteStageScore removes all scoring data for a player/stage pair.
  rpc DeleteStageScore(DeleteStageScoreRequest) returns (DeleteStageScoreResponse) {}
}

// --------------------
// Debug
// --------------------

// PurgeAllCaches

message PurgeAllCachesRequest {}

message PurgeAllCachesResponse {}

// --------------------
// Players
// --------------------

// CreatePlayer

message AdminServiceCreatePlayerRequest {
  string event_key = 1 [deprecated = true];
  PlayerData player_data = 2;
  string phone_number = 3;
  EventRegistration registration = 4;
}
message AdminServiceCreatePlayerResponse {
  Player player = 1;
}

// UpdatePlayer

message UpdatePlayerRequest {
  string player_id = 1;
  PlayerData player_data = 2;
  EventRegistration registration = 3;
}
message UpdatePlayerResponse {
  Player player = 1;
}

// ListPlayers

message ListPlayersRequest {
  string event_key = 1;
}
message ListPlayersResponse {
  repeated Player players = 1;
}

// --------------------
// Schedule
// --------------------

message Rule {
  string id = 1;
  string venue_description = 2;
}

message Stage {
  string id = 1;
  Venue venue = 2;
  Rule rule = 3;
  int32 rank = 4;
  int32 duration_min = 5;
}

message ListVenuesRequest {}
message ListVenuesResponse {
  repeated Venue venues = 1;
}

message UpdateStageRequest {
  string stage_id = 1;
  string venue_id = 2;
  string venue_description = 3;
  int32 rank = 4;
  int32 duration_min = 5;
}
message UpdateStageResponse {}

message ListEventStagesRequest {
  string event_key = 1;
}
message ListEventStagesResponse {
  repeated Stage stages = 1;
}

// --------------------
// Adjustments
// --------------------

message AdjustmentTemplateData {
  AdjustmentData adjustment = 1;
  int32 rank = 2;
  string event_key = 3;
  optional string stage_id = 4;
  bool is_visible = 5;
}

message AdjustmentTemplate {
  string id = 1;
  AdjustmentTemplateData data = 2;
}

// CreateAdjustmentTemplate

message CreateAdjustmentTemplateRequest {
  AdjustmentTemplateData data = 1;
}
message CreateAdjustmentTemplateResponse {}

// UpdateAdjustmentTemplate

message UpdateAdjustmentTemplateRequest {
  AdjustmentTemplate template = 1;
}
message UpdateAdjustmentTemplateResponse {}

// ListAdjustmentTemplates

message ListAdjustmentTemplatesRequest {
  string event_key = 1;
}
message ListAdjustmentTemplatesResponse {
  repeated AdjustmentTemplate templates = 1;
}

// --------------------
// Scores
// --------------------

// Shared

message Score {
  string id = 1;
  ScoreData data = 2;
}

message ScoreData {
  uint32 value = 1;
}

message Adjustment {
  string id = 1;
  AdjustmentData data = 2;
}

message AdjustmentData {
  int32 value = 1;
  string label = 2;
}

message StageScore {
  string stage_id = 1;
  string player_id = 2;
  Score score = 3;
  repeated Adjustment adjustments = 4;
  bool is_verified = 5;
}

message StageScoreData {
  string stage_id = 1;
  string player_id = 2;
  ScoreData score = 3;
  repeated AdjustmentData adjustments = 4;
}

// CreateStageScore

message CreateStageScoreRequest {
  StageScoreData data = 1;
  optional string idempotency_key = 2;
}
message CreateStageScoreResponse {
  StageScore score = 1;
}

// UpdateStageScore

message UpdateStageScoreRequest {
  StageScore score = 1;
}
message UpdateStageScoreResponse {
  StageScore score = 1;
}

// ListStageScores

enum StageScoreVerifiedFilter {
  STAGE_SCORE_VERIFIED_FILTER_UNSPECIFIED = 0;
  STAGE_SCORE_VERIFIED_FILTER_ALL = 1;
  STAGE_SCORE_VERIFIED_FILTER_ONLY_UNVERIFIED = 2;
}

message ListStageScoresRequest {
  string event_key = 1;
  // Default is STAGE_SCORE_VERIFIED_FILTER_ALL.
  optional StageScoreVerifiedFilter verified_filter = 2;
}
message ListStageScoresResponse {
  repeated StageScore scores = 1;
}

// DeleteStageScore

message DeleteStageScoreRequest {
  string stage_id = 1;
  string player_id = 2;
}
message DeleteStageScoreResponse {}

// PubGolf defines the app-facing API service for the in-game apps.

// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts"
// @generated from file api/v1/pubgolf.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ClientVersionRequest, ClientVersionResponse, CompletePlayerLoginRequest, CompletePlayerLoginResponse, DeleteMyAccountRequest, DeleteMyAccountResponse, GetContentItemRequest, GetContentItemResponse, GetMyPlayerRequest, GetMyPlayerResponse, GetPlayerRequest, GetPlayerResponse, GetScheduleRequest, GetScheduleResponse, GetScoresForCategoryRequest, GetScoresForCategoryResponse, GetScoresForPlayerRequest, GetScoresForPlayerResponse, GetScoresForVenueRequest, GetScoresForVenueResponse, GetSubmitScoreFormRequest, GetSubmitScoreFormResponse, GetVenueRequest, GetVenueResponse, ListContentItemsRequest, ListContentItemsResponse, PubGolfServiceCreatePlayerRequest, PubGolfServiceCreatePlayerResponse, StartPlayerLoginRequest, StartPlayerLoginResponse, SubmitScoreRequest, SubmitScoreResponse, UpdatePlayerDataRequest, UpdatePlayerDataResponse, UpdateRegistrationRequest, UpdateRegistrationResponse } from "./pubgolf_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * PubGolfService is the API server which handles all score keeping, scheduling and account management for pub golf.
 *
 * @generated from service api.v1.PubGolfService
 */
export const PubGolfService = {
  typeName: "api.v1.PubGolfService",
  methods: {
    /**
     * ClientVersion (unauthenticated) indicates to the server that a client of a given version is attempting to connect, and allows the server to respond with a "soft" or "hard" upgrade notification.
     *
     * @generated from rpc api.v1.PubGolfService.ClientVersion
     */
    clientVersion: {
      name: "ClientVersion",
      I: ClientVersionRequest,
      O: ClientVersionResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CreatePlayer creates a new player profile for a given event.
     *
     * Deprecated: Use `StartPlayerLogin` RPC instead.
     *
     * @generated from rpc api.v1.PubGolfService.CreatePlayer
     * @deprecated
     */
    createPlayer: {
      name: "CreatePlayer",
      I: PubGolfServiceCreatePlayerRequest,
      O: PubGolfServiceCreatePlayerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * StartPlayerLogin (unauthenticated) registers the player's contact info if the player doesn't exist, then sends an auth code.
     *
     * @generated from rpc api.v1.PubGolfService.StartPlayerLogin
     */
    startPlayerLogin: {
      name: "StartPlayerLogin",
      I: StartPlayerLoginRequest,
      O: StartPlayerLoginResponse,
      kind: MethodKind.Unary,
    },
    /**
     * CompletePlayerLogin (unauthenticated) accepts an auth code and logs in the player, returning the data necessary to bootstrap a player's session in the app.
     *
     * @generated from rpc api.v1.PubGolfService.CompletePlayerLogin
     */
    completePlayerLogin: {
      name: "CompletePlayerLogin",
      I: CompletePlayerLoginRequest,
      O: CompletePlayerLoginResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetMyPlayer is an authenticated request that returns the same data as `CompletePlayerLogin()` if the player's auth token is still valid.
     *
     * @generated from rpc api.v1.PubGolfService.GetMyPlayer
     */
    getMyPlayer: {
      name: "GetMyPlayer",
      I: GetMyPlayerRequest,
      O: GetMyPlayerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * DeleteMyAccount purges all data related to the authenticated player.
     *
     * @generated from rpc api.v1.PubGolfService.DeleteMyAccount
     */
    deleteMyAccount: {
      name: "DeleteMyAccount",
      I: DeleteMyAccountRequest,
      O: DeleteMyAccountResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetPlayer returns the player object including profile data and event registrations, given a player_id.
     *
     * @generated from rpc api.v1.PubGolfService.GetPlayer
     */
    getPlayer: {
      name: "GetPlayer",
      I: GetPlayerRequest,
      O: GetPlayerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdateRegistration upserts an event registration for the given player.
     *
     * @generated from rpc api.v1.PubGolfService.UpdateRegistration
     */
    updateRegistration: {
      name: "UpdateRegistration",
      I: UpdateRegistrationRequest,
      O: UpdateRegistrationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * UpdatePlayerData updates the given player's profile data.
     *
     * @generated from rpc api.v1.PubGolfService.UpdatePlayerData
     */
    updatePlayerData: {
      name: "UpdatePlayerData",
      I: UpdatePlayerDataRequest,
      O: UpdatePlayerDataResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSchedule returns the list of visble venues, as well as the next venue transition time. It optionally accepts a data version to allow local caching.
     *
     * @generated from rpc api.v1.PubGolfService.GetSchedule
     */
    getSchedule: {
      name: "GetSchedule",
      I: GetScheduleRequest,
      O: GetScheduleResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetVenue performs a bulk lookup of venue metadata by ID. IDs are scoped to an event key.
     *
     * @generated from rpc api.v1.PubGolfService.GetVenue
     */
    getVenue: {
      name: "GetVenue",
      I: GetVenueRequest,
      O: GetVenueResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ListContentItems
     *
     * @generated from rpc api.v1.PubGolfService.ListContentItems
     */
    listContentItems: {
      name: "ListContentItems",
      I: ListContentItemsRequest,
      O: ListContentItemsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetContentItem
     *
     * @generated from rpc api.v1.PubGolfService.GetContentItem
     */
    getContentItem: {
      name: "GetContentItem",
      I: GetContentItemRequest,
      O: GetContentItemResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSubmitScoreForm returns the form definition for submitting or revising a player's score at a specific event venue.
     *
     * @generated from rpc api.v1.PubGolfService.GetSubmitScoreForm
     */
    getSubmitScoreForm: {
      name: "GetSubmitScoreForm",
      I: GetSubmitScoreFormRequest,
      O: GetSubmitScoreFormResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetSubmitScoreForm submits a player's proposed score at a specific event venue.
     *
     * @generated from rpc api.v1.PubGolfService.SubmitScore
     */
    submitScore: {
      name: "SubmitScore",
      I: SubmitScoreRequest,
      O: SubmitScoreResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetScoresForCategory
     *
     * @generated from rpc api.v1.PubGolfService.GetScoresForCategory
     */
    getScoresForCategory: {
      name: "GetScoresForCategory",
      I: GetScoresForCategoryRequest,
      O: GetScoresForCategoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetScoresForPlayer
     *
     * @generated from rpc api.v1.PubGolfService.GetScoresForPlayer
     */
    getScoresForPlayer: {
      name: "GetScoresForPlayer",
      I: GetScoresForPlayerRequest,
      O: GetScoresForPlayerResponse,
      kind: MethodKind.Unary,
    },
    /**
     * GetScoresForVenue
     *
     * @generated from rpc api.v1.PubGolfService.GetScoresForVenue
     */
    getScoresForVenue: {
      name: "GetScoresForVenue",
      I: GetScoresForVenueRequest,
      O: GetScoresForVenueResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;


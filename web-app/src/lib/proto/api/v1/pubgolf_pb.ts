// PubGolf defines the app-facing API service for the in-game apps.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file api/v1/pubgolf.proto (package api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { Color, EventRegistration, Form, FormSubmission, Player, PlayerData, ScoreBoard, ScoringCategory, Venue } from "./shared_pb.js";

/**
 * @generated from enum api.v1.ScoreStatus
 */
export enum ScoreStatus {
  /**
   * @generated from enum value: SCORE_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: SCORE_STATUS_REQUIRED = 1;
   */
  REQUIRED = 1,

  /**
   * @generated from enum value: SCORE_STATUS_OPTIONAL = 2;
   */
  OPTIONAL = 2,

  /**
   * @generated from enum value: SCORE_STATUS_NOT_REQUIRED = 3;
   */
  NOT_REQUIRED = 3,

  /**
   * @generated from enum value: SCORE_STATUS_SUBMITTED_EDITABLE = 4;
   */
  SUBMITTED_EDITABLE = 4,

  /**
   * @generated from enum value: SCORE_STATUS_SUBMITTED_NON_EDITABLE = 5;
   */
  SUBMITTED_NON_EDITABLE = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ScoreStatus)
proto3.util.setEnumType(ScoreStatus, "api.v1.ScoreStatus", [
  { no: 0, name: "SCORE_STATUS_UNSPECIFIED" },
  { no: 1, name: "SCORE_STATUS_REQUIRED" },
  { no: 2, name: "SCORE_STATUS_OPTIONAL" },
  { no: 3, name: "SCORE_STATUS_NOT_REQUIRED" },
  { no: 4, name: "SCORE_STATUS_SUBMITTED_EDITABLE" },
  { no: 5, name: "SCORE_STATUS_SUBMITTED_NON_EDITABLE" },
]);

/**
 * @generated from message api.v1.ClientVersionRequest
 */
export class ClientVersionRequest extends Message<ClientVersionRequest> {
  /**
   * @generated from field: uint32 client_version = 1;
   */
  clientVersion = 0;

  constructor(data?: PartialMessage<ClientVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClientVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "client_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientVersionRequest {
    return new ClientVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientVersionRequest {
    return new ClientVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientVersionRequest {
    return new ClientVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ClientVersionRequest | PlainMessage<ClientVersionRequest> | undefined, b: ClientVersionRequest | PlainMessage<ClientVersionRequest> | undefined): boolean {
    return proto3.util.equals(ClientVersionRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ClientVersionResponse
 */
export class ClientVersionResponse extends Message<ClientVersionResponse> {
  /**
   * @generated from field: api.v1.ClientVersionResponse.VersionStatus version_status = 1;
   */
  versionStatus = ClientVersionResponse_VersionStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<ClientVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ClientVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version_status", kind: "enum", T: proto3.getEnumType(ClientVersionResponse_VersionStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClientVersionResponse {
    return new ClientVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClientVersionResponse {
    return new ClientVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClientVersionResponse {
    return new ClientVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ClientVersionResponse | PlainMessage<ClientVersionResponse> | undefined, b: ClientVersionResponse | PlainMessage<ClientVersionResponse> | undefined): boolean {
    return proto3.util.equals(ClientVersionResponse, a, b);
  }
}

/**
 * @generated from enum api.v1.ClientVersionResponse.VersionStatus
 */
export enum ClientVersionResponse_VersionStatus {
  /**
   * @generated from enum value: VERSION_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: VERSION_STATUS_OK = 1;
   */
  OK = 1,

  /**
   * @generated from enum value: VERSION_STATUS_OUTDATED = 2;
   */
  OUTDATED = 2,

  /**
   * @generated from enum value: VERSION_STATUS_INCOMPATIBLE = 3;
   */
  INCOMPATIBLE = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ClientVersionResponse_VersionStatus)
proto3.util.setEnumType(ClientVersionResponse_VersionStatus, "api.v1.ClientVersionResponse.VersionStatus", [
  { no: 0, name: "VERSION_STATUS_UNSPECIFIED" },
  { no: 1, name: "VERSION_STATUS_OK" },
  { no: 2, name: "VERSION_STATUS_OUTDATED" },
  { no: 3, name: "VERSION_STATUS_INCOMPATIBLE" },
]);

/**
 * @generated from message api.v1.PubGolfServiceCreatePlayerRequest
 * @deprecated
 */
export class PubGolfServiceCreatePlayerRequest extends Message<PubGolfServiceCreatePlayerRequest> {
  /**
   * @generated from field: string event_key = 1;
   */
  eventKey = "";

  /**
   * @generated from field: api.v1.PlayerData player_data = 2;
   */
  playerData?: PlayerData;

  constructor(data?: PartialMessage<PubGolfServiceCreatePlayerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PubGolfServiceCreatePlayerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "player_data", kind: "message", T: PlayerData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PubGolfServiceCreatePlayerRequest {
    return new PubGolfServiceCreatePlayerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PubGolfServiceCreatePlayerRequest {
    return new PubGolfServiceCreatePlayerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PubGolfServiceCreatePlayerRequest {
    return new PubGolfServiceCreatePlayerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PubGolfServiceCreatePlayerRequest | PlainMessage<PubGolfServiceCreatePlayerRequest> | undefined, b: PubGolfServiceCreatePlayerRequest | PlainMessage<PubGolfServiceCreatePlayerRequest> | undefined): boolean {
    return proto3.util.equals(PubGolfServiceCreatePlayerRequest, a, b);
  }
}

/**
 * @generated from message api.v1.PubGolfServiceCreatePlayerResponse
 * @deprecated
 */
export class PubGolfServiceCreatePlayerResponse extends Message<PubGolfServiceCreatePlayerResponse> {
  /**
   * @generated from field: api.v1.Player player = 1;
   */
  player?: Player;

  constructor(data?: PartialMessage<PubGolfServiceCreatePlayerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.PubGolfServiceCreatePlayerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player", kind: "message", T: Player },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PubGolfServiceCreatePlayerResponse {
    return new PubGolfServiceCreatePlayerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PubGolfServiceCreatePlayerResponse {
    return new PubGolfServiceCreatePlayerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PubGolfServiceCreatePlayerResponse {
    return new PubGolfServiceCreatePlayerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PubGolfServiceCreatePlayerResponse | PlainMessage<PubGolfServiceCreatePlayerResponse> | undefined, b: PubGolfServiceCreatePlayerResponse | PlainMessage<PubGolfServiceCreatePlayerResponse> | undefined): boolean {
    return proto3.util.equals(PubGolfServiceCreatePlayerResponse, a, b);
  }
}

/**
 * @generated from message api.v1.StartPlayerLoginRequest
 */
export class StartPlayerLoginRequest extends Message<StartPlayerLoginRequest> {
  /**
   * In E.164 format: https://www.twilio.com/docs/glossary/what-e164
   *
   * @generated from field: string phone_number = 1;
   */
  phoneNumber = "";

  constructor(data?: PartialMessage<StartPlayerLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.StartPlayerLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartPlayerLoginRequest {
    return new StartPlayerLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartPlayerLoginRequest {
    return new StartPlayerLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartPlayerLoginRequest {
    return new StartPlayerLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: StartPlayerLoginRequest | PlainMessage<StartPlayerLoginRequest> | undefined, b: StartPlayerLoginRequest | PlainMessage<StartPlayerLoginRequest> | undefined): boolean {
    return proto3.util.equals(StartPlayerLoginRequest, a, b);
  }
}

/**
 * @generated from message api.v1.StartPlayerLoginResponse
 */
export class StartPlayerLoginResponse extends Message<StartPlayerLoginResponse> {
  constructor(data?: PartialMessage<StartPlayerLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.StartPlayerLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartPlayerLoginResponse {
    return new StartPlayerLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartPlayerLoginResponse {
    return new StartPlayerLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartPlayerLoginResponse {
    return new StartPlayerLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartPlayerLoginResponse | PlainMessage<StartPlayerLoginResponse> | undefined, b: StartPlayerLoginResponse | PlainMessage<StartPlayerLoginResponse> | undefined): boolean {
    return proto3.util.equals(StartPlayerLoginResponse, a, b);
  }
}

/**
 * @generated from message api.v1.CompletePlayerLoginRequest
 */
export class CompletePlayerLoginRequest extends Message<CompletePlayerLoginRequest> {
  /**
   * In E.164 format: https://www.twilio.com/docs/glossary/what-e164
   *
   * @generated from field: string phone_number = 1;
   */
  phoneNumber = "";

  /**
   * @generated from field: string auth_code = 2;
   */
  authCode = "";

  constructor(data?: PartialMessage<CompletePlayerLoginRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CompletePlayerLoginRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phone_number", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "auth_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompletePlayerLoginRequest {
    return new CompletePlayerLoginRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompletePlayerLoginRequest {
    return new CompletePlayerLoginRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompletePlayerLoginRequest {
    return new CompletePlayerLoginRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CompletePlayerLoginRequest | PlainMessage<CompletePlayerLoginRequest> | undefined, b: CompletePlayerLoginRequest | PlainMessage<CompletePlayerLoginRequest> | undefined): boolean {
    return proto3.util.equals(CompletePlayerLoginRequest, a, b);
  }
}

/**
 * @generated from message api.v1.CompletePlayerLoginResponse
 */
export class CompletePlayerLoginResponse extends Message<CompletePlayerLoginResponse> {
  /**
   * @generated from field: api.v1.Player player = 1;
   */
  player?: Player;

  /**
   * @generated from field: string auth_token = 2;
   */
  authToken = "";

  constructor(data?: PartialMessage<CompletePlayerLoginResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.CompletePlayerLoginResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player", kind: "message", T: Player },
    { no: 2, name: "auth_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CompletePlayerLoginResponse {
    return new CompletePlayerLoginResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CompletePlayerLoginResponse {
    return new CompletePlayerLoginResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CompletePlayerLoginResponse {
    return new CompletePlayerLoginResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CompletePlayerLoginResponse | PlainMessage<CompletePlayerLoginResponse> | undefined, b: CompletePlayerLoginResponse | PlainMessage<CompletePlayerLoginResponse> | undefined): boolean {
    return proto3.util.equals(CompletePlayerLoginResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetMyPlayerRequest
 */
export class GetMyPlayerRequest extends Message<GetMyPlayerRequest> {
  constructor(data?: PartialMessage<GetMyPlayerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetMyPlayerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMyPlayerRequest {
    return new GetMyPlayerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMyPlayerRequest {
    return new GetMyPlayerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMyPlayerRequest {
    return new GetMyPlayerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMyPlayerRequest | PlainMessage<GetMyPlayerRequest> | undefined, b: GetMyPlayerRequest | PlainMessage<GetMyPlayerRequest> | undefined): boolean {
    return proto3.util.equals(GetMyPlayerRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetMyPlayerResponse
 */
export class GetMyPlayerResponse extends Message<GetMyPlayerResponse> {
  /**
   * @generated from field: api.v1.Player player = 1;
   */
  player?: Player;

  constructor(data?: PartialMessage<GetMyPlayerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetMyPlayerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player", kind: "message", T: Player },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMyPlayerResponse {
    return new GetMyPlayerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMyPlayerResponse {
    return new GetMyPlayerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMyPlayerResponse {
    return new GetMyPlayerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMyPlayerResponse | PlainMessage<GetMyPlayerResponse> | undefined, b: GetMyPlayerResponse | PlainMessage<GetMyPlayerResponse> | undefined): boolean {
    return proto3.util.equals(GetMyPlayerResponse, a, b);
  }
}

/**
 * @generated from message api.v1.DeleteMyAccountRequest
 */
export class DeleteMyAccountRequest extends Message<DeleteMyAccountRequest> {
  constructor(data?: PartialMessage<DeleteMyAccountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DeleteMyAccountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMyAccountRequest {
    return new DeleteMyAccountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMyAccountRequest {
    return new DeleteMyAccountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMyAccountRequest {
    return new DeleteMyAccountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMyAccountRequest | PlainMessage<DeleteMyAccountRequest> | undefined, b: DeleteMyAccountRequest | PlainMessage<DeleteMyAccountRequest> | undefined): boolean {
    return proto3.util.equals(DeleteMyAccountRequest, a, b);
  }
}

/**
 * @generated from message api.v1.DeleteMyAccountResponse
 */
export class DeleteMyAccountResponse extends Message<DeleteMyAccountResponse> {
  constructor(data?: PartialMessage<DeleteMyAccountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.DeleteMyAccountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteMyAccountResponse {
    return new DeleteMyAccountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteMyAccountResponse {
    return new DeleteMyAccountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteMyAccountResponse {
    return new DeleteMyAccountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteMyAccountResponse | PlainMessage<DeleteMyAccountResponse> | undefined, b: DeleteMyAccountResponse | PlainMessage<DeleteMyAccountResponse> | undefined): boolean {
    return proto3.util.equals(DeleteMyAccountResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetPlayerRequest
 */
export class GetPlayerRequest extends Message<GetPlayerRequest> {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId = "";

  constructor(data?: PartialMessage<GetPlayerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetPlayerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPlayerRequest {
    return new GetPlayerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPlayerRequest {
    return new GetPlayerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPlayerRequest {
    return new GetPlayerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPlayerRequest | PlainMessage<GetPlayerRequest> | undefined, b: GetPlayerRequest | PlainMessage<GetPlayerRequest> | undefined): boolean {
    return proto3.util.equals(GetPlayerRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetPlayerResponse
 */
export class GetPlayerResponse extends Message<GetPlayerResponse> {
  /**
   * @generated from field: api.v1.Player player = 1;
   */
  player?: Player;

  constructor(data?: PartialMessage<GetPlayerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetPlayerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player", kind: "message", T: Player },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPlayerResponse {
    return new GetPlayerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPlayerResponse {
    return new GetPlayerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPlayerResponse {
    return new GetPlayerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPlayerResponse | PlainMessage<GetPlayerResponse> | undefined, b: GetPlayerResponse | PlainMessage<GetPlayerResponse> | undefined): boolean {
    return proto3.util.equals(GetPlayerResponse, a, b);
  }
}

/**
 * @generated from message api.v1.UpdateRegistrationRequest
 */
export class UpdateRegistrationRequest extends Message<UpdateRegistrationRequest> {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId = "";

  /**
   * @generated from field: api.v1.EventRegistration registration = 2;
   */
  registration?: EventRegistration;

  constructor(data?: PartialMessage<UpdateRegistrationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdateRegistrationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "registration", kind: "message", T: EventRegistration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRegistrationRequest {
    return new UpdateRegistrationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRegistrationRequest {
    return new UpdateRegistrationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRegistrationRequest {
    return new UpdateRegistrationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRegistrationRequest | PlainMessage<UpdateRegistrationRequest> | undefined, b: UpdateRegistrationRequest | PlainMessage<UpdateRegistrationRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRegistrationRequest, a, b);
  }
}

/**
 * @generated from message api.v1.UpdateRegistrationResponse
 */
export class UpdateRegistrationResponse extends Message<UpdateRegistrationResponse> {
  /**
   * @generated from field: api.v1.EventRegistration registration = 1;
   */
  registration?: EventRegistration;

  constructor(data?: PartialMessage<UpdateRegistrationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdateRegistrationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "registration", kind: "message", T: EventRegistration },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRegistrationResponse {
    return new UpdateRegistrationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRegistrationResponse {
    return new UpdateRegistrationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRegistrationResponse {
    return new UpdateRegistrationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRegistrationResponse | PlainMessage<UpdateRegistrationResponse> | undefined, b: UpdateRegistrationResponse | PlainMessage<UpdateRegistrationResponse> | undefined): boolean {
    return proto3.util.equals(UpdateRegistrationResponse, a, b);
  }
}

/**
 * @generated from message api.v1.UpdatePlayerDataRequest
 */
export class UpdatePlayerDataRequest extends Message<UpdatePlayerDataRequest> {
  /**
   * @generated from field: string player_id = 1;
   */
  playerId = "";

  /**
   * @generated from field: api.v1.PlayerData data = 2;
   */
  data?: PlayerData;

  constructor(data?: PartialMessage<UpdatePlayerDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdatePlayerDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "message", T: PlayerData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePlayerDataRequest {
    return new UpdatePlayerDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePlayerDataRequest {
    return new UpdatePlayerDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePlayerDataRequest {
    return new UpdatePlayerDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePlayerDataRequest | PlainMessage<UpdatePlayerDataRequest> | undefined, b: UpdatePlayerDataRequest | PlainMessage<UpdatePlayerDataRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePlayerDataRequest, a, b);
  }
}

/**
 * @generated from message api.v1.UpdatePlayerDataResponse
 */
export class UpdatePlayerDataResponse extends Message<UpdatePlayerDataResponse> {
  /**
   * @generated from field: api.v1.PlayerData data = 1;
   */
  data?: PlayerData;

  constructor(data?: PartialMessage<UpdatePlayerDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.UpdatePlayerDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: PlayerData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePlayerDataResponse {
    return new UpdatePlayerDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePlayerDataResponse {
    return new UpdatePlayerDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePlayerDataResponse {
    return new UpdatePlayerDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePlayerDataResponse | PlainMessage<UpdatePlayerDataResponse> | undefined, b: UpdatePlayerDataResponse | PlainMessage<UpdatePlayerDataResponse> | undefined): boolean {
    return proto3.util.equals(UpdatePlayerDataResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetScheduleRequest
 */
export class GetScheduleRequest extends Message<GetScheduleRequest> {
  /**
   * @generated from field: string event_key = 1;
   */
  eventKey = "";

  /**
   * @generated from field: optional uint32 cached_data_version = 2;
   */
  cachedDataVersion?: number;

  constructor(data?: PartialMessage<GetScheduleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetScheduleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cached_data_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScheduleRequest {
    return new GetScheduleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScheduleRequest {
    return new GetScheduleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScheduleRequest {
    return new GetScheduleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetScheduleRequest | PlainMessage<GetScheduleRequest> | undefined, b: GetScheduleRequest | PlainMessage<GetScheduleRequest> | undefined): boolean {
    return proto3.util.equals(GetScheduleRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetScheduleResponse
 */
export class GetScheduleResponse extends Message<GetScheduleResponse> {
  /**
   * @generated from field: uint32 latest_data_version = 1;
   */
  latestDataVersion = 0;

  /**
   * @generated from field: optional api.v1.GetScheduleResponse.Schedule schedule = 2;
   */
  schedule?: GetScheduleResponse_Schedule;

  constructor(data?: PartialMessage<GetScheduleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetScheduleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "latest_data_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "schedule", kind: "message", T: GetScheduleResponse_Schedule, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScheduleResponse {
    return new GetScheduleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScheduleResponse {
    return new GetScheduleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScheduleResponse {
    return new GetScheduleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetScheduleResponse | PlainMessage<GetScheduleResponse> | undefined, b: GetScheduleResponse | PlainMessage<GetScheduleResponse> | undefined): boolean {
    return proto3.util.equals(GetScheduleResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetScheduleResponse.Schedule
 */
export class GetScheduleResponse_Schedule extends Message<GetScheduleResponse_Schedule> {
  /**
   * List of past venues. Does not include the current venue.
   *
   * @generated from field: repeated uint32 visited_venue_keys = 1;
   */
  visitedVenueKeys: number[] = [];

  /**
   * Optional in the case that the event hasn't started yet.
   *
   * @generated from field: optional uint32 current_venue_key = 2;
   */
  currentVenueKey?: number;

  /**
   * Optional in the case that the next venue isn't yet visible to players, or after the second to last venue. The next venue key only becomes visible X mins before the next venue's start time.
   *
   * @generated from field: optional uint32 next_venue_key = 3;
   */
  nextVenueKey?: number;

  /**
   * @generated from field: optional google.protobuf.Timestamp next_venue_start = 4;
   */
  nextVenueStart?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp event_end = 5;
   */
  eventEnd?: Timestamp;

  /**
   * current_venue_description contains rules specific to the current venue, in markdown format.
   *
   * @generated from field: optional string current_venue_description = 6;
   */
  currentVenueDescription?: string;

  constructor(data?: PartialMessage<GetScheduleResponse_Schedule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetScheduleResponse.Schedule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "visited_venue_keys", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 2, name: "current_venue_key", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 3, name: "next_venue_key", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
    { no: 4, name: "next_venue_start", kind: "message", T: Timestamp, opt: true },
    { no: 5, name: "event_end", kind: "message", T: Timestamp },
    { no: 6, name: "current_venue_description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScheduleResponse_Schedule {
    return new GetScheduleResponse_Schedule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScheduleResponse_Schedule {
    return new GetScheduleResponse_Schedule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScheduleResponse_Schedule {
    return new GetScheduleResponse_Schedule().fromJsonString(jsonString, options);
  }

  static equals(a: GetScheduleResponse_Schedule | PlainMessage<GetScheduleResponse_Schedule> | undefined, b: GetScheduleResponse_Schedule | PlainMessage<GetScheduleResponse_Schedule> | undefined): boolean {
    return proto3.util.equals(GetScheduleResponse_Schedule, a, b);
  }
}

/**
 * @generated from message api.v1.GetVenueRequest
 */
export class GetVenueRequest extends Message<GetVenueRequest> {
  /**
   * @generated from field: string event_key = 1;
   */
  eventKey = "";

  /**
   * @generated from field: repeated uint32 venue_keys = 2;
   */
  venueKeys: number[] = [];

  constructor(data?: PartialMessage<GetVenueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetVenueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "venue_keys", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVenueRequest {
    return new GetVenueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVenueRequest {
    return new GetVenueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVenueRequest {
    return new GetVenueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVenueRequest | PlainMessage<GetVenueRequest> | undefined, b: GetVenueRequest | PlainMessage<GetVenueRequest> | undefined): boolean {
    return proto3.util.equals(GetVenueRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetVenueResponse
 */
export class GetVenueResponse extends Message<GetVenueResponse> {
  /**
   * Map of requested venue keys to Venue objects.
   *
   * @generated from field: map<uint32, api.v1.GetVenueResponse.VenueWrapper> venues = 1;
   */
  venues: { [key: number]: GetVenueResponse_VenueWrapper } = {};

  constructor(data?: PartialMessage<GetVenueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetVenueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "venues", kind: "map", K: 13 /* ScalarType.UINT32 */, V: {kind: "message", T: GetVenueResponse_VenueWrapper} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVenueResponse {
    return new GetVenueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVenueResponse {
    return new GetVenueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVenueResponse {
    return new GetVenueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVenueResponse | PlainMessage<GetVenueResponse> | undefined, b: GetVenueResponse | PlainMessage<GetVenueResponse> | undefined): boolean {
    return proto3.util.equals(GetVenueResponse, a, b);
  }
}

/**
 * VenueWrapper allows us to return an empty wrapper in the case of an invalid or unauthorized venue ID.
 *
 * @generated from message api.v1.GetVenueResponse.VenueWrapper
 */
export class GetVenueResponse_VenueWrapper extends Message<GetVenueResponse_VenueWrapper> {
  /**
   * @generated from field: optional api.v1.Venue venue = 1;
   */
  venue?: Venue;

  constructor(data?: PartialMessage<GetVenueResponse_VenueWrapper>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetVenueResponse.VenueWrapper";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "venue", kind: "message", T: Venue, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVenueResponse_VenueWrapper {
    return new GetVenueResponse_VenueWrapper().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVenueResponse_VenueWrapper {
    return new GetVenueResponse_VenueWrapper().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVenueResponse_VenueWrapper {
    return new GetVenueResponse_VenueWrapper().fromJsonString(jsonString, options);
  }

  static equals(a: GetVenueResponse_VenueWrapper | PlainMessage<GetVenueResponse_VenueWrapper> | undefined, b: GetVenueResponse_VenueWrapper | PlainMessage<GetVenueResponse_VenueWrapper> | undefined): boolean {
    return proto3.util.equals(GetVenueResponse_VenueWrapper, a, b);
  }
}

/**
 * @generated from message api.v1.ListContentItemsRequest
 */
export class ListContentItemsRequest extends Message<ListContentItemsRequest> {
  /**
   * @generated from field: string event_key = 1;
   */
  eventKey = "";

  constructor(data?: PartialMessage<ListContentItemsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ListContentItemsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListContentItemsRequest {
    return new ListContentItemsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListContentItemsRequest {
    return new ListContentItemsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListContentItemsRequest {
    return new ListContentItemsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListContentItemsRequest | PlainMessage<ListContentItemsRequest> | undefined, b: ListContentItemsRequest | PlainMessage<ListContentItemsRequest> | undefined): boolean {
    return proto3.util.equals(ListContentItemsRequest, a, b);
  }
}

/**
 * @generated from message api.v1.ListContentItemsResponse
 */
export class ListContentItemsResponse extends Message<ListContentItemsResponse> {
  /**
   * @generated from field: repeated api.v1.ListContentItemsResponse.Section sections = 1;
   */
  sections: ListContentItemsResponse_Section[] = [];

  constructor(data?: PartialMessage<ListContentItemsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ListContentItemsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sections", kind: "message", T: ListContentItemsResponse_Section, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListContentItemsResponse {
    return new ListContentItemsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListContentItemsResponse {
    return new ListContentItemsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListContentItemsResponse {
    return new ListContentItemsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListContentItemsResponse | PlainMessage<ListContentItemsResponse> | undefined, b: ListContentItemsResponse | PlainMessage<ListContentItemsResponse> | undefined): boolean {
    return proto3.util.equals(ListContentItemsResponse, a, b);
  }
}

/**
 * @generated from message api.v1.ListContentItemsResponse.ContentItemMetaData
 */
export class ListContentItemsResponse_ContentItemMetaData extends Message<ListContentItemsResponse_ContentItemMetaData> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * icon_key is an SF-Symbol name (e.g. "heart.fill").
   *
   * @generated from field: string icon_key = 3;
   */
  iconKey = "";

  /**
   * @generated from field: api.v1.Color icon_color = 4;
   */
  iconColor?: Color;

  constructor(data?: PartialMessage<ListContentItemsResponse_ContentItemMetaData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ListContentItemsResponse.ContentItemMetaData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "icon_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "icon_color", kind: "message", T: Color },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListContentItemsResponse_ContentItemMetaData {
    return new ListContentItemsResponse_ContentItemMetaData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListContentItemsResponse_ContentItemMetaData {
    return new ListContentItemsResponse_ContentItemMetaData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListContentItemsResponse_ContentItemMetaData {
    return new ListContentItemsResponse_ContentItemMetaData().fromJsonString(jsonString, options);
  }

  static equals(a: ListContentItemsResponse_ContentItemMetaData | PlainMessage<ListContentItemsResponse_ContentItemMetaData> | undefined, b: ListContentItemsResponse_ContentItemMetaData | PlainMessage<ListContentItemsResponse_ContentItemMetaData> | undefined): boolean {
    return proto3.util.equals(ListContentItemsResponse_ContentItemMetaData, a, b);
  }
}

/**
 * @generated from message api.v1.ListContentItemsResponse.Section
 */
export class ListContentItemsResponse_Section extends Message<ListContentItemsResponse_Section> {
  /**
   * @generated from field: string display_name = 1;
   */
  displayName = "";

  /**
   * @generated from field: repeated api.v1.ListContentItemsResponse.ContentItemMetaData content_sections = 2;
   */
  contentSections: ListContentItemsResponse_ContentItemMetaData[] = [];

  /**
   * icon_key is an SF-Symbol name (e.g. "heart.fill").
   *
   * @generated from field: string icon_key = 3;
   */
  iconKey = "";

  /**
   * @generated from field: api.v1.Color icon_color = 4;
   */
  iconColor?: Color;

  constructor(data?: PartialMessage<ListContentItemsResponse_Section>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.ListContentItemsResponse.Section";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content_sections", kind: "message", T: ListContentItemsResponse_ContentItemMetaData, repeated: true },
    { no: 3, name: "icon_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "icon_color", kind: "message", T: Color },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListContentItemsResponse_Section {
    return new ListContentItemsResponse_Section().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListContentItemsResponse_Section {
    return new ListContentItemsResponse_Section().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListContentItemsResponse_Section {
    return new ListContentItemsResponse_Section().fromJsonString(jsonString, options);
  }

  static equals(a: ListContentItemsResponse_Section | PlainMessage<ListContentItemsResponse_Section> | undefined, b: ListContentItemsResponse_Section | PlainMessage<ListContentItemsResponse_Section> | undefined): boolean {
    return proto3.util.equals(ListContentItemsResponse_Section, a, b);
  }
}

/**
 * @generated from message api.v1.GetContentItemRequest
 */
export class GetContentItemRequest extends Message<GetContentItemRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetContentItemRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetContentItemRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetContentItemRequest {
    return new GetContentItemRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetContentItemRequest {
    return new GetContentItemRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetContentItemRequest {
    return new GetContentItemRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetContentItemRequest | PlainMessage<GetContentItemRequest> | undefined, b: GetContentItemRequest | PlainMessage<GetContentItemRequest> | undefined): boolean {
    return proto3.util.equals(GetContentItemRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetContentItemResponse
 */
export class GetContentItemResponse extends Message<GetContentItemResponse> {
  /**
   * content is in markdown format.
   *
   * @generated from field: string content = 1;
   */
  content = "";

  constructor(data?: PartialMessage<GetContentItemResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetContentItemResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetContentItemResponse {
    return new GetContentItemResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetContentItemResponse {
    return new GetContentItemResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetContentItemResponse {
    return new GetContentItemResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetContentItemResponse | PlainMessage<GetContentItemResponse> | undefined, b: GetContentItemResponse | PlainMessage<GetContentItemResponse> | undefined): boolean {
    return proto3.util.equals(GetContentItemResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetSubmitScoreFormRequest
 */
export class GetSubmitScoreFormRequest extends Message<GetSubmitScoreFormRequest> {
  /**
   * @generated from field: string event_key = 1;
   */
  eventKey = "";

  /**
   * @generated from field: uint32 venue_key = 2;
   */
  venueKey = 0;

  /**
   * @generated from field: string player_id = 3;
   */
  playerId = "";

  constructor(data?: PartialMessage<GetSubmitScoreFormRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetSubmitScoreFormRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "venue_key", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubmitScoreFormRequest {
    return new GetSubmitScoreFormRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubmitScoreFormRequest {
    return new GetSubmitScoreFormRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubmitScoreFormRequest {
    return new GetSubmitScoreFormRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubmitScoreFormRequest | PlainMessage<GetSubmitScoreFormRequest> | undefined, b: GetSubmitScoreFormRequest | PlainMessage<GetSubmitScoreFormRequest> | undefined): boolean {
    return proto3.util.equals(GetSubmitScoreFormRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetSubmitScoreFormResponse
 */
export class GetSubmitScoreFormResponse extends Message<GetSubmitScoreFormResponse> {
  /**
   * @generated from field: api.v1.ScoreStatus status = 1;
   */
  status = ScoreStatus.UNSPECIFIED;

  /**
   * @generated from field: api.v1.Form form = 2;
   */
  form?: Form;

  constructor(data?: PartialMessage<GetSubmitScoreFormResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetSubmitScoreFormResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ScoreStatus) },
    { no: 2, name: "form", kind: "message", T: Form },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSubmitScoreFormResponse {
    return new GetSubmitScoreFormResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSubmitScoreFormResponse {
    return new GetSubmitScoreFormResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSubmitScoreFormResponse {
    return new GetSubmitScoreFormResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSubmitScoreFormResponse | PlainMessage<GetSubmitScoreFormResponse> | undefined, b: GetSubmitScoreFormResponse | PlainMessage<GetSubmitScoreFormResponse> | undefined): boolean {
    return proto3.util.equals(GetSubmitScoreFormResponse, a, b);
  }
}

/**
 * @generated from message api.v1.SubmitScoreRequest
 */
export class SubmitScoreRequest extends Message<SubmitScoreRequest> {
  /**
   * @generated from field: string event_key = 1;
   */
  eventKey = "";

  /**
   * @generated from field: uint32 venue_key = 2;
   */
  venueKey = 0;

  /**
   * @generated from field: string player_id = 3;
   */
  playerId = "";

  /**
   * @generated from field: optional string idempotency_key = 4;
   */
  idempotencyKey?: string;

  /**
   * @generated from field: api.v1.FormSubmission data = 5;
   */
  data?: FormSubmission;

  constructor(data?: PartialMessage<SubmitScoreRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.SubmitScoreRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "venue_key", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "idempotency_key", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 5, name: "data", kind: "message", T: FormSubmission },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitScoreRequest {
    return new SubmitScoreRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitScoreRequest {
    return new SubmitScoreRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitScoreRequest {
    return new SubmitScoreRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitScoreRequest | PlainMessage<SubmitScoreRequest> | undefined, b: SubmitScoreRequest | PlainMessage<SubmitScoreRequest> | undefined): boolean {
    return proto3.util.equals(SubmitScoreRequest, a, b);
  }
}

/**
 * @generated from message api.v1.SubmitScoreResponse
 */
export class SubmitScoreResponse extends Message<SubmitScoreResponse> {
  /**
   * @generated from field: api.v1.ScoreStatus status = 1;
   */
  status = ScoreStatus.UNSPECIFIED;

  constructor(data?: PartialMessage<SubmitScoreResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.SubmitScoreResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "enum", T: proto3.getEnumType(ScoreStatus) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubmitScoreResponse {
    return new SubmitScoreResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubmitScoreResponse {
    return new SubmitScoreResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubmitScoreResponse {
    return new SubmitScoreResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubmitScoreResponse | PlainMessage<SubmitScoreResponse> | undefined, b: SubmitScoreResponse | PlainMessage<SubmitScoreResponse> | undefined): boolean {
    return proto3.util.equals(SubmitScoreResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetScoresForCategoryRequest
 */
export class GetScoresForCategoryRequest extends Message<GetScoresForCategoryRequest> {
  /**
   * @generated from field: string event_key = 1;
   */
  eventKey = "";

  /**
   * @generated from field: api.v1.ScoringCategory category = 2;
   */
  category = ScoringCategory.UNSPECIFIED;

  constructor(data?: PartialMessage<GetScoresForCategoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetScoresForCategoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "category", kind: "enum", T: proto3.getEnumType(ScoringCategory) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScoresForCategoryRequest {
    return new GetScoresForCategoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScoresForCategoryRequest {
    return new GetScoresForCategoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScoresForCategoryRequest {
    return new GetScoresForCategoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetScoresForCategoryRequest | PlainMessage<GetScoresForCategoryRequest> | undefined, b: GetScoresForCategoryRequest | PlainMessage<GetScoresForCategoryRequest> | undefined): boolean {
    return proto3.util.equals(GetScoresForCategoryRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetScoresForCategoryResponse
 */
export class GetScoresForCategoryResponse extends Message<GetScoresForCategoryResponse> {
  /**
   * @generated from field: api.v1.ScoreBoard score_board = 1;
   */
  scoreBoard?: ScoreBoard;

  constructor(data?: PartialMessage<GetScoresForCategoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetScoresForCategoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "score_board", kind: "message", T: ScoreBoard },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScoresForCategoryResponse {
    return new GetScoresForCategoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScoresForCategoryResponse {
    return new GetScoresForCategoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScoresForCategoryResponse {
    return new GetScoresForCategoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetScoresForCategoryResponse | PlainMessage<GetScoresForCategoryResponse> | undefined, b: GetScoresForCategoryResponse | PlainMessage<GetScoresForCategoryResponse> | undefined): boolean {
    return proto3.util.equals(GetScoresForCategoryResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetScoresForPlayerRequest
 */
export class GetScoresForPlayerRequest extends Message<GetScoresForPlayerRequest> {
  /**
   * @generated from field: string event_key = 1;
   */
  eventKey = "";

  /**
   * @generated from field: string player_id = 2;
   */
  playerId = "";

  constructor(data?: PartialMessage<GetScoresForPlayerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetScoresForPlayerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "player_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScoresForPlayerRequest {
    return new GetScoresForPlayerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScoresForPlayerRequest {
    return new GetScoresForPlayerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScoresForPlayerRequest {
    return new GetScoresForPlayerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetScoresForPlayerRequest | PlainMessage<GetScoresForPlayerRequest> | undefined, b: GetScoresForPlayerRequest | PlainMessage<GetScoresForPlayerRequest> | undefined): boolean {
    return proto3.util.equals(GetScoresForPlayerRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetScoresForPlayerResponse
 */
export class GetScoresForPlayerResponse extends Message<GetScoresForPlayerResponse> {
  /**
   * @generated from field: api.v1.ScoreBoard score_board = 1;
   */
  scoreBoard?: ScoreBoard;

  constructor(data?: PartialMessage<GetScoresForPlayerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetScoresForPlayerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "score_board", kind: "message", T: ScoreBoard },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScoresForPlayerResponse {
    return new GetScoresForPlayerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScoresForPlayerResponse {
    return new GetScoresForPlayerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScoresForPlayerResponse {
    return new GetScoresForPlayerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetScoresForPlayerResponse | PlainMessage<GetScoresForPlayerResponse> | undefined, b: GetScoresForPlayerResponse | PlainMessage<GetScoresForPlayerResponse> | undefined): boolean {
    return proto3.util.equals(GetScoresForPlayerResponse, a, b);
  }
}

/**
 * @generated from message api.v1.GetScoresForVenueRequest
 */
export class GetScoresForVenueRequest extends Message<GetScoresForVenueRequest> {
  /**
   * @generated from field: string event_key = 1;
   */
  eventKey = "";

  /**
   * @generated from field: string venue_id = 2;
   */
  venueId = "";

  constructor(data?: PartialMessage<GetScoresForVenueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetScoresForVenueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "venue_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScoresForVenueRequest {
    return new GetScoresForVenueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScoresForVenueRequest {
    return new GetScoresForVenueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScoresForVenueRequest {
    return new GetScoresForVenueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetScoresForVenueRequest | PlainMessage<GetScoresForVenueRequest> | undefined, b: GetScoresForVenueRequest | PlainMessage<GetScoresForVenueRequest> | undefined): boolean {
    return proto3.util.equals(GetScoresForVenueRequest, a, b);
  }
}

/**
 * @generated from message api.v1.GetScoresForVenueResponse
 */
export class GetScoresForVenueResponse extends Message<GetScoresForVenueResponse> {
  /**
   * @generated from field: api.v1.ScoreBoard score_board = 1;
   */
  scoreBoard?: ScoreBoard;

  constructor(data?: PartialMessage<GetScoresForVenueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "api.v1.GetScoresForVenueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "score_board", kind: "message", T: ScoreBoard },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetScoresForVenueResponse {
    return new GetScoresForVenueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetScoresForVenueResponse {
    return new GetScoresForVenueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetScoresForVenueResponse {
    return new GetScoresForVenueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetScoresForVenueResponse | PlainMessage<GetScoresForVenueResponse> | undefined, b: GetScoresForVenueResponse | PlainMessage<GetScoresForVenueResponse> | undefined): boolean {
    return proto3.util.equals(GetScoresForVenueResponse, a, b);
  }
}

